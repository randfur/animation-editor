# 2023-01-29 Sunday
- Thoughts on how to do UI:
  - Solid JS is neat.
  - const [value, setValue] = createSignal(null); is a cool idea.
  - Wrap a JSON object with a proxy that auto generates the signals as it's read.
  - Creates signals for inner values automatically on access.
  - Sub objects know where they are in their parent object.
  - Probably can't transparently wrap a JSON object, will need to be its own data type than easily converts into JSON.
  - UI elements should have a render function that gets called to generate an HTML template.
  - This render function is aware of signal usages and will update its template instance automatically.
  - HTML template will be defined in pure JS createElement({...}) style rather than html``, different to Solid JS.
    - html`` needs lambdas around its signal accesses.
    - Don't think I'll actually use Solid JS' signals anyway, just copy the idea.
  - Primary purpose of this design is to have the model be read by multiple UI elements and have them all listen for updates automatically.
  - Avoid the Redux design where your main.js contains every single link between model, action and UI.
  - This is just taking the Solid JS design, keeping the rendering pattern but making the signal part of it able to handle deeply nested objects.
- Thoughts on many animation frames.
  - Having a long animation with every frame a separate PNG probably doesn't scale well.
  - Trying to load too many PNGs will fill up the image cache and cause them to decode during runtime as they try to draw.
  - Maybe instead support something more vector like.
    - Simple linear line paths that the user draws.
    - Have a "fill" point that acts as a fill for that area.
    - The fill can dynamically update as the shape around it changes.
    - Can cache the fill area as a series of horizontal/vertical lines.
    - Rendering the lines could be done with WebGL eventually for speed.
      - This doesn't mesh well with the existing canvas based async-game-engine drawing.
      - Drawing paths in 2D canvas is probably perfectly fine.
      - Or maybe just go full WebGL and have the game engine be very opinionated as being sprite based.
        - You have to draw to OffscreenCanvases and insert them into the 3D render if you want the 2D API.

# 2023-01-21 Saturday
- Restructure project folders to be able to have multiple sample animations.
- Start to define a file format for animation packs.
  - They're folders full of their image assets and an animation-pack.json file.

# 2023-01-19 Thursday
- Added interface definitions here and there.
- Implemented keyframe progression and looping and sub animation updating.
- Added sub animation skipSeconds.
- Extended sample animation to have multiple sub animations of the same animation name.

# 2023-01-18 Wednesday
- Rewrote some drawing code in terms of TransformStack, it works.
- Updated the sample animation to have two layers and give the dog two frames.

# 2023-01-15 Sunday
- Pulled in the optimised matrix implementation from experiments.

# 2023-01-02 Monday
- Just draw something.
- Add totalFrames member to animations, don't rely on longest layer, layers get clipped if they're too short.
- Need a transform stack object. Manually doing the layering is hard and doesn't work with sub animations.

# 2022-12-16 Friday
- ui.js smaller, no templating, Element.append(...children) works fine.
- Probably still want RAII slot that auto swaps out one of the elements.
- Probably need re-rendering logic.
  - Do it manually and see what can be generalised.
- Animation data format
  - Concrete example
    const animationPack = {
      animations: {
        dog: {
          framesPerSecond: 10,
          transform: {
            origin: {
              x: 20,
              y: 80,
            },
          },
          layers: [{
            keyframes: [{
              frameCount: 1,
              elements: [{
                type: 'image',
                imageSource: 'dog.png',
              }, {
                type: 'ref',
                subAnimation: 'spark',
                transform: {
                  translate: {
                    x: 10,
                    y: 10,
                  },
                },
              }],
            }],
          }],
          subAnimations: {
            spark: {
              animationName: 'spark',
            },
          },
        },
        spark: {
          framesPerSecond: 1,
          transform: {
            origin: {
              x: 16,
              y: 16,
            },
          },
          layers: [{
            keyframes: [{
              frameCount: 1,
              elements: [{
                type: 'image',
                imageSource: 'spark0.png',
              }],
            }, {
              frameCount: 1,
              elements: [{
                type: 'image',
                imageSource: 'spark1.png',
              }],
            }],
          }],
        },
      },
    };


# 2022-11-29 Tuesday
const directory = await getDirectoryAccess();
for await (const entry of directory.entries())
VM1181:1 (2) ['directory-access.js', FileSystemFileHandle]0: "directory-access.js"1: FileSystemFileHandlekind: "file"name: "directory-access.js"[[Prototype]]: FileSystemFileHandlelength: 2[[Prototype]]: Array(0)
VM1181:1 (2) ['main.js', FileSystemFileHandle]
VM1181:1 (2) ['.git', FileSystemDirectoryHandle]
VM1181:1 (2) ['index.html', FileSystemFileHandle]
const file = entry[1];
const writable = await file.createWritable()
writable.write('dogs')
writable.close()

# 2022-11-27 Sunday
- Copied from async-game-engine complex-sprites example.
- Animation format:
  - Animation Pack:
    - Animation list
  - Animation:
    - Animation name
    - Frames per second
    - Sub animation list
    - Transform
    - Layer list
  - Layer:
    - Transform
    - Keyframe list
  - Keyframe:
    - Frame count
    - Element list
  - Element:
    - Image reference or Sub animation reference
  - Image reference:
    - Image source
    - Transform
  - Sub animation reference:
    - Seek to frame?
    - Sub animation name
    - Transform
  - Sub animation:
    - Sub animation name
    - Animation name
    - Start frame
    - Restart on loop?
